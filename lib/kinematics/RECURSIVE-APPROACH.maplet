
with(MBSymba_r6):
with(LinearAlgebra):

# RECURSIVE APPROACH
P0    := origin(ground):   
printf("\nReference frame 1"):                             
RF1   := translate(x1 + s(t),y1,0);                     
P1    := origin(RF1): 
Gact := P1:                                  
#Gact  := make_POINT(ground,x1 + (s(t)+L1)/2,y1,0):
P01  := make_POINT(ground,x1,y1,0):



printf("\nReference frame 2"):
RF2   := RF1.translate(L1,0,0).rotate('Z',theta1(t));   
P2    := origin(RF2):                                   
P3    := make_POINT(RF2,LP,0,0):                        
Gpod  := make_POINT(RF2,LP/2,0,0):  
 
printf("\nReference frame 3"):
RF3 := translate(x4,y4,0).rotate('Z',theta3(t));      
P4  := origin(RF3):                                   
P5  := make_POINT(RF3,LF,0,0):                        
RF3_CoM := combine(RF3.rotate('Z',psi));  

Gflap  := make_POINT(RF3_CoM,LFb,0,0):                
P3b    := make_POINT(RF3,anc,0,0): 

# Constraint equations
join_points(P3,P3b):  
printf("\nThe constraint equations are"):                            
Phi := [comp_X(%,ground),comp_Y(%,ground)]:<%>;

printf("\nKinematics variables"): 
q_vars := {theta1(t), theta3(t), s(t)};
# Check the DOFs of the system
# Check jacobian of constraints for consistency
printf("\nCheck the consistency of the system (Implict function theorem)"):
combine(jacobianF(Phi, q_vars));  Dimensions(%);
combine(GaussianElimination(%%)); Dimensions(%);

# the system is consistent so i can apply the general formula to compute the degree of freedom of a body
;
# Number of degree of freedom
nq := nops(q_vars):
nc := nops(Phi):

printf("\nThe DOFs of the system are"):
n_dof = nq - nc;
# Analytic solution
# List of dependent and independent coordinate
q_I := {theta3(t)}:
q_D := q_vars minus q_I;
# 
# Analytic solution
printf("Analytic solution"):
sol_kine_all := op(solve(Phi, convert(q_D,list), explicit=true)): <%>;
sol_kine := simplify(sol_kine_all):
read("./lib/kinematics/OPTIMIZATION.maplet"):
read("./lib/kinematics/PVAanalysis.maplet"):
