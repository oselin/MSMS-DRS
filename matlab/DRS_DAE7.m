classdef DRS_DAE7 < DAC_ODEclass
    properties (SetAccess = protected, Hidden = true)
        Iz1           ;      
        Iz3           ;      
        L1            ;  
        LF            ;      
        LFb           ;      
        LP            ;      
        anc           ;      
        g             ;      
        m1            ;      
        m3            ;      
        psi           ;          
        x1            ;      
        x4            ;
        y1            ;  
        y4            ;  
        s__closed     ;   
    end

    methods   
        
        function self = DRS_DAE7(Iz1,Iz3,L1,LF,LFb,LP,anc,g,m1,m3,psi,x1,x4,y1,y4,s__closed)
            neq  = 7;   %number of equations
            ninv = 5;  %number of hidden constraints

            self@DAC_ODEclass('DRS_DAE',neq,ninv);

            %setup of the parameter of the ODE
self.Iz1       = Iz1           ;
self.Iz3       = Iz3           ;
self.L1        = L1            ;
self.LF        = LF            ;
self.LFb       = LFb           ;
self.LP        = LP            ;
self.anc       = anc           ;
self.g         = g             ;
self.m1        = m1            ;
self.m3        = m3            ;
self.psi       = psi           ;
self.x1        = x1            ;
self.x4        = x4            ;
self.y1        = y1            ;
self.y4        = y4            ;
self.s__closed = s__closed     ;
        end






function res__f = f( self, t, vars__ )

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta3 = vars__(3);
      s__dot = vars__(4);
      theta3__dot = vars__(5);
      lambda1 = vars__(6);
      lambda2 = vars__(7);

Iz1           = self.Iz1       ;
Iz3           = self.Iz3       ;
L1            = self.L1        ;
LF            = self.LF        ;
LFb           = self.LFb       ;
LP            = self.LP        ;
anc           = self.anc       ;
g             = self.g         ;
m1            = self.m1        ;
m3            = self.m3        ;
psi           = self.psi       ;
x1            = self.x1        ;
x4            = self.x4        ;
y1            = self.y1        ;
y4            = self.y4        ;
s__closed     = self.s__closed ;
    

      % evaluate function
      res__1 = s__dot;
      t1 = cos(theta3);
      t2 = anc * t1;
      t5 = cos(theta1);
      res__2 = 0.1e1 / t5 / LP * theta3__dot * t2;
      res__3 = theta3__dot;
      t8 = 0.4188790205e2 * t;
      t9 = sin(t8);
      t10 = 0.91666666e-1 * t9;
      t11 = 0.3839724285e1 * t;
      t12 = -0.3796091123e1 - t10 + t11;
      t13 = cos(t12);
      t15 = sin(t12);
      t16 = t15 * lambda1;
      t19 = cos(-0.4057890511e1 - t10 + t11);
      t21 = cos(t8);
      t22 = t21 ^ 2;
      t23 = t22 ^ 2;
      t29 = t ^ 2;
      t35 = t29 * t;
      t42 = t29 ^ 2;
      t44 = -0.1327293e0 * t13 - 0.1e1 * t16 - 0.327277296e2 * t19 + 0.1687127173e1 * t23 + t22 * (t9 * (0.2826808679e3 * t - 0.216070271e2) + 0.271521908e4 * t - 0.1776136257e5 * t29 - 0.7999797435e2) + t9 * (-0.6701894868e4 * t + 0.11373483e6 * t29 - 0.495990805e6 * t35 + 0.1448315271e3) + 0.6076308472e3 - 0.787682908e4 * t - 0.158803778e7 * t35 + 0.1522050926e6 * t29 + 0.5194003507e7 * t42;
      t45 = t13 ^ 2;
      t49 = sqrt(0.888775927785968922e0 + t45 * 0.111111111111111133e0 + t15 * 0.708554406034431639e-2);
      res__4 = 0.1e1 / (-0.1e1 * t49 * t15 * m1 + 0.3333333333e0 * t13 * (t15 - 0.3188494827e-1) * m1) * (t49 * t44 + t13 * (0.3333333333e0 * t16 - 0.1062831609e-1 * lambda1));
      t65 = 0.2479954025e5 * t35;
      t66 = t29 * 0.568674148999999943e4;
      t74 = cos(0.837758041e2 * t);
      t79 = sin(0.1256637062e3 * t);
      t84 = 0.2597001753e6 * t42;
      t86 = cos(0.1675516082e3 * t);
      t90 = sin(theta3);
      t94 = cos(theta3 + psi);
      t96 = g * m3;
      t99 = t9 * (-t65 + t66 + t * (-0.331561222600000008e3) + 0.697150351199999996e1) + t74 * (-0.1957771229e1 + 0.678804765e2 * t - 0.4440340642e3 * t29) + t79 * (0.353351085e1 * t - 0.2700878375e0) - 0.3259606765e3 * t + 0.2841322669e2 + 0.7166220064e4 * t29 - 0.794018892e5 * t35 + t84 + 0.1054454483e-1 * t86 - 0.1e1 * lambda2 * t2 + lambda1 * anc * t90 - 0.1e1 * t96 * t94 * LFb;
      t100 = LFb ^ 2;
      t101 = m3 * t100;
      res__5 = 0.1e1 / (t101 + Iz3) * t99;
      t104 = sin(theta1);
      t105 = LP ^ 2;
      t106 = t105 * t104;
      t107 = t5 ^ 2;
      t108 = t107 ^ 2;
      t109 = t108 * t5;
      t113 = t1 ^ 2;
      t114 = t113 * anc;
      t115 = t104 * t107;
      t116 = LP * t115;
      t120 = 3 * theta1;
      t121 = cos(t120);
      t123 = sin(t120);
      t124 = t123 * t109;
      t125 = t90 * t124;
      t128 = t108 ^ 2;
      t129 = t128 * t5;
      t133 = t105 * t1;
      t137 = t107 * t5;
      t138 = t108 * t137;
      t139 = t138 * t105;
      t142 = t108 * t107;
      t146 = LP * t104;
      t153 = t104 * t137;
      t154 = LP * t153;
      t160 = -0.1350439188e0 + 0.1766755425e1 * t;
      t161 = t105 * t160;
      t162 = t104 * t1;
      t163 = t109 * t162;
      t167 = -LP * anc * t160;
      t168 = t104 * t113;
      t169 = t107 * t168;
      t173 = t90 * t161;
      t175 = t123 * t109 * t104;
      t178 = -0.1413404340e2 * t + 0.1080351350e1;
      t179 = t105 * t178;
      t180 = t129 * t90;
      t183 = -t105 * t178;
      t184 = t128 * t162;
      t188 = t105 * (0.1236728798e2 * t - 0.9453074310e0);
      t189 = t138 * t90;
      t192 = -0.4051317562e0 + 0.5300266275e1 * t;
      t193 = t105 * t192;
      t194 = t142 * t162;
      t196 = anc * t178;
      t197 = t113 * LP;
      t198 = t104 * t197;
      t204 = -LP * anc * t192;
      t205 = t137 * t168;
      t211 = -0.4999873522e0 - 0.1110085160e3 * t29 + 0.1697011912e2 * t;
      t212 = t105 * t211;
      t216 = -LP * anc * t211;
      t220 = t90 * t212;
      t224 = -0.1357609530e3 * t + 0.8880681285e3 * t29 + 0.3999898818e1;
      t225 = t105 * t224;
      t228 = -t105 * t224;
      t233 = t105 * (0.1187908339e3 * t - 0.7770596125e3 * t29 - 0.3499911466e1);
      t237 = 0.5091035740e2 * t - 0.3330255482e3 * t29 - 0.1499962057e1;
      t238 = t105 * t237;
      t240 = anc * t224;
      t246 = -LP * anc * t237;
      t253 = -0.3099942531e4 * t35 + t29 * 0.710842685999999958e3 + t * (-0.418868416799999963e2) + 0.905198918999999713e0;
      t254 = t105 * t253;
      t258 = -LP * anc * t253;
      t262 = t90 * t254;
      t265 = t * 0.335094733399999996e3 + t65 - t66 - 0.724159134999999932e1;
      t266 = t105 * t265;
      t269 = -t105 * t265;
      t275 = t105 * (t * (-0.293207891799999970e3) - 0.2169959772e5 * t35 + t29 * 0.497589880400000038e4 + 0.633639243000000096e1);
      t280 = t * (-0.125660525100000015e3) - 0.9299827595e4 * t35 + t29 * 0.213252805900000021e4 + 0.271559675600000006e1;
      t281 = t105 * t280;
      t283 = anc * t265;
      t289 = -LP * anc * t280;
      t293 = t105 * LFb;
      t294 = sin(psi);
      t296 = m3 * g * t294;
      t297 = t296 * t293;
      t299 = anc * t105;
      t300 = lambda1 * t299;
      t302 = 0.1250000000e0 * t297 + 0.1250000000e0 * t300;
      t304 = 2 * theta3;
      t305 = sin(t304);
      t306 = t305 * t109;
      t308 = cos(psi);
      t310 = m3 * g * t308;
      t311 = t310 * t293;
      t312 = 0.1250000000e0 * t311;
      t313 = lambda2 * t299;
      t314 = 0.1250000000e0 * t313;
      t315 = -t312 - t314;
      t316 = t104 * t315;
      t317 = cos(t304);
      t318 = t317 * t109;
      t324 = 0.3246252191e5 * t42 + t35 * (-0.992523614999999882e4) + t29 * 0.951281765999999948e3 + t * (-0.492301441199999914e2) + 0.379769280799999898e1;
      t325 = t105 * t324;
      t327 = theta3__dot ^ 2;
      t328 = t327 * t101;
      t330 = t327 * Iz3;
      t332 = -0.1250000000e0 * t328 - 0.1250000000e0 * t330;
      t333 = t105 * t332;
      t339 = anc * LFb * LP;
      t340 = t310 * t339;
      t342 = anc ^ 2;
      t343 = LP * t342;
      t344 = lambda2 * t343;
      t347 = t113 * t1;
      t349 = t296 * t339;
      t351 = lambda1 * t343;
      t356 = -anc * t324;
      t360 = -t332;
      t361 = anc * t360;
      t362 = t90 * LP;
      t363 = t1 * t362;
      t369 = 0.3750000000e0 * t330 + 0.3750000000e0 * t328;
      t370 = t342 * t369;
      t374 = -t369;
      t375 = t342 * t374;
      t380 = -t302;
      t383 = t105 * t360;
      t384 = t1 * t383;
      t385 = t90 * t325;
      t401 = anc * (0.5000000000e0 * t330 + 0.5000000000e0 * t328);
      t416 = 0.1000000000e1 * t297;
      t417 = 0.1000000000e1 * t300;
      t418 = t416 + t417;
      t422 = 0.1000000000e1 * t311 + 0.1000000000e1 * t313;
      t428 = -t84 + t35 * 0.794018891999999905e5 + t29 * (-0.761025413000000026e4) + t * 0.393841152999999792e3 - 0.303815424599999879e2;
      t429 = t105 * t428;
      t433 = -t422;
      t437 = -t105 * t428;
      t443 = t342 * t90 * lambda2;
      t445 = 0.5000000000e0 * t443 * t197;
      t446 = t347 * LP;
      t447 = t342 * lambda1;
      t449 = 0.5000000000e0 * t447 * t446;
      t453 = LP * lambda2;
      t456 = t113 * t342;
      t457 = lambda1 * t362;
      t472 = t105 * (0.2272376534e6 * t42 + t35 * (-0.694766530499999935e5) + t29 * 0.665897236000000066e4 + t * (-0.344611008900000002e3) + 0.265838496500000048e2);
      t480 = 0.9738756575e5 * t42 + t35 * (-0.297757084500000019e5) + t29 * 0.285384529799999973e4 + t * (-0.147690432399999992e3) + 0.113930784200000002e2;
      t481 = t105 * t480;
      t483 = t105 * t374;
      t497 = anc * t428;
      t514 = -anc * t480;
      t518 = anc * t369;
      t524 = 0.1125000000e1 * t330 + 0.1125000000e1 * t328;
      t525 = t342 * t524;
      t530 = -t342 * t524;
      t533 = t23 * (t121 * (0.1054454483e-1 * t1 * t109 * t106 - 0.1054454483e-1 * t116 * t114) + 0.1054454483e-1 * t125 * t106 - 0.8435635865e-1 * t90 * t129 * t105 + 0.8435635865e-1 * t104 * t128 * t133 + 0.7381181380e-1 * t90 * t139 + 0.3163363449e-1 * t1 * t142 * t106 + t109 * (-0.8435635865e-1 * t146 * t114 + 0.1054454483e-1 * t90 * t105) - 0.3163363449e-1 * t154 * t114) + t22 * (t9 * (t121 * (t163 * t161 + t169 * t167) + t175 * t173 + t180 * t179 + t184 * t183 + t189 * t188 + t194 * t193 + t109 * (t198 * t196 + t173) + t205 * t204) + t121 * (t163 * t212 + t169 * t216) + t175 * t220 + t180 * t225 + t184 * t228 + t189 * t233 + t194 * t238 + t109 * (t198 * t240 + t220) + t205 * t246) + t9 * (t121 * (t163 * t254 + t169 * t258) + t175 * t262 + t180 * t266 + t184 * t269 + t189 * t275 + t194 * t281 + t109 * (t198 * t283 + t262) + t205 * t289) + t121 * (t306 * t104 * t302 + t318 * t316 + t109 * t104 * (t1 * t325 + t90 * t333) + t107 * (t104 * (t347 * (0.1250000000e0 * t340 + 0.1250000000e0 * t344) + t113 * (t90 * (-0.1250000000e0 * t349 - 0.1250000000e0 * t351) + LP * t356) + t363 * t361) + t347 * t370) + t347 * t375) + t123 * (t306 * t316 + t318 * t104 * t380 + t109 * t104 * (t384 + t385)) + t305 * (-t138 * t315 + t142 * t104 * (0.3750000000e0 * t300 + 0.3750000000e0 * t297) + t109 * (t146 * t401 - t312 - t314)) + t317 * (t138 * t302 + t142 * t104 * (-0.3750000000e0 * t313 - 0.3750000000e0 * t311) + t109 * t380) + t129 * (t1 * t90 * t422 + t113 * t418 + t90 * t429 - t416 - t417) + t128 * (t104 * (t113 * t433 + t1 * (t90 * t418 + t437)) + t445 - t449) + t138 * (t104 * (-0.5000000000e0 * t453 * t347 * t342 - 0.5000000000e0 * t457 * t456) - t113 * t418 + t1 * (t90 * t433 + t333) + t90 * t472 + t416 + t417) + t142 * (t104 * (t1 * t481 + t90 * t483) + t449 - t445) + t109 * (t104 * (t347 * (0.1000000000e1 * t340 + 0.1500000000e1 * t344) + t113 * (t90 * (-0.1000000000e1 * t351 - 0.1000000000e1 * t349) + LP * t497)) + t384 + t385) + t137 * (t104 * (t347 * (0.3750000000e0 * t340 + 0.3750000000e0 * t344) + t113 * (t90 * (-0.3750000000e0 * t351 - 0.3750000000e0 * t349) + LP * t514) + t363 * t518) + t347 * t525) + t5 * t347 * t530;
      t535 = anc * m1;
      t536 = m1 * t456;
      t539 = m1 * t342;
      t542 = 0.2e1 * t536 - 0.1e1 * t101 - 0.1e1 * t539 - 0.1e1 * Iz3;
      t545 = t104 ^ 2;
      t548 = m1 * t1;
      t553 = m1 * t113;
      res__6 = 0.2000000000e1 / (t128 * t542 * t106 + 0.2e1 * t189 * t548 * t342 * t105 * t545 - 0.1e1 * t142 * t553 * t342 * t106) * t535 * t533 * theta3__dot;
      t562 = t113 * t535;
      t565 = t104 * m1;
      t575 = t105 * m1;
      t582 = t90 * m1;
      t597 = m1 * t161;
      t599 = t115 * t553;
      t604 = t124 * t104 * t90;
      t606 = t129 * t582;
      t610 = t138 * t582;
      t615 = t104 * t553;
      t620 = t153 * t553;
      t624 = m1 * t212;
      t644 = m1 * t254;
      t665 = anc * lambda1 * t575;
      t668 = t105 * LFb * m1;
      t669 = t296 * t668;
      t671 = 0.1250000000e0 * t665 + 0.1250000000e0 * t669;
      t675 = anc * lambda2 * t575;
      t676 = 0.1250000000e0 * t675;
      t677 = t310 * t668;
      t678 = 0.1250000000e0 * t677;
      t679 = -t676 - t678;
      t680 = t104 * t679;
      t687 = t453 * t539;
      t692 = t96 * t308 * LP * LFb * t535;
      t697 = LP * lambda1 * t539;
      t702 = t96 * t294 * LFb * LP * t535;
      t706 = m1 * LP;
      t711 = t1 * t582;
      t715 = t347 * m1;
      t723 = -t671;
      t726 = t548 * t383;
      t727 = t582 * t325;
      t755 = 0.1000000000e1 * t665;
      t756 = 0.1000000000e1 * t669;
      t757 = t755 + t756;
      t761 = 0.1000000000e1 * t675 + 0.1000000000e1 * t677;
      t767 = -t761;
      t780 = 0.5000000000e0 * t443 * t113 * t706;
      t860 = t23 * (t121 * (-0.1054454483e-1 * t116 * t562 + 0.1054454483e-1 * t1 * t109 * t105 * t565) + 0.1054454483e-1 * t125 * t105 * t565 - 0.8435635865e-1 * t180 * t575 + 0.8435635865e-1 * t104 * m1 * t128 * t133 + 0.7381181380e-1 * t582 * t139 + 0.3163363449e-1 * t194 * t575 + t109 * (0.1054454483e-1 * t90 * t575 - 0.8435635865e-1 * t198 * t535) - 0.3163363449e-1 * t154 * t562) + t22 * (t9 * (t121 * (t163 * t597 + t599 * t167) + t604 * t597 + t606 * t179 + t184 * m1 * t183 + t610 * t188 + t194 * m1 * t193 + t109 * (t615 * LP * t196 + t582 * t161) + t620 * t204) + t121 * (t163 * t624 + t599 * t216) + t604 * t624 + t606 * t225 + t184 * m1 * t228 + t610 * t233 + t194 * m1 * t238 + t109 * (t615 * LP * t240 + t582 * t212) + t620 * t246) + t9 * (t121 * (t163 * t644 + t599 * t258) + t604 * t644 + t606 * t266 + t184 * m1 * t269 + t610 * t275 + t194 * m1 * t281 + t109 * (t615 * LP * t283 + t582 * t254) + t620 * t289) + t121 * (t306 * t104 * t671 + t318 * t680 + t109 * t104 * (t548 * t325 + t582 * t333) + t107 * (t104 * (t347 * (0.1250000000e0 * t687 + 0.1250000000e0 * t692) + t113 * (t90 * (-0.1250000000e0 * t697 - 0.1250000000e0 * t702) + t706 * t356) + t711 * LP * t361) + t715 * t370) + t715 * t375) + t123 * (t306 * t680 + t318 * t104 * t723 + t109 * t104 * (t726 + t727)) + t305 * (-t138 * t679 + t142 * t104 * (0.3750000000e0 * t669 + 0.3750000000e0 * t665) + t109 * (t104 * t706 * t401 - t676 - t678)) + t317 * (t138 * t671 + t142 * t104 * (-0.3750000000e0 * t677 - 0.3750000000e0 * t675) + t109 * t723) + t129 * (t1 * t90 * t761 + t113 * t757 + t582 * t429 - t755 - t756) + t128 * (t104 * (t113 * t767 + t1 * (m1 * t437 + t90 * t757)) + 0.5000000000e0 * m1 * t447 * t446 - t780 + t1 * (-0.5000000000e0 * t697 + LP * (-0.5000000000e0 * m3 * lambda1 * t100 - 0.5000000000e0 * Iz3 * lambda1))) + t138 * (t104 * (0.5000000000e0 * lambda2 * t446 * t539 + 0.5000000000e0 * t457 * t536 + t1 * (-0.5000000000e0 * t687 + LP * (-0.5000000000e0 * Iz3 * lambda2 - 0.5000000000e0 * m3 * lambda2 * t100))) - t113 * t757 + t1 * (m1 * t333 + t90 * t767) + t582 * t472 + t755 + t756) + t142 * (t104 * (t548 * t481 + t582 * t483) + t780) + t109 * (t104 * (t347 * (0.1000000000e1 * t687 + 0.1000000000e1 * t692) + t113 * (t90 * (-0.1000000000e1 * t697 - 0.1000000000e1 * t702) + t706 * t497)) + t726 + t727) + t137 * (t104 * (t347 * (0.3750000000e0 * t692 + 0.3750000000e0 * t687) + t113 * (t90 * (-0.3750000000e0 * t697 - 0.3750000000e0 * t702) + t706 * t514) + t711 * LP * t518) + t715 * t525) + t5 * t715 * t530;
      t863 = t342 * t105;
      res__7 = 0.2000000000e1 / (t129 * t542 * t105 + 0.2e1 * t128 * t90 * t565 * t1 * t863 - 0.1e1 * t138 * t553 * t863) * t860 * theta3__dot * anc;
      

      % store on output
      res__f = zeros(7,1);
      res__f(1) = res__1;
      res__f(2) = res__2;
      res__f(3) = res__3;
      res__f(4) = res__4;
      res__f(5) = res__5;
      res__f(6) = res__6;
      res__f(7) = res__7;

    end
    function res__DfDx = DfDx( self, t, vars__ )

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta3 = vars__(3);
      s__dot = vars__(4);
      theta3__dot = vars__(5);
      lambda1 = vars__(6);
      lambda2 = vars__(7);

Iz1           = self.Iz1       ;
Iz3           = self.Iz3       ;
L1            = self.L1        ;
LF            = self.LF        ;
LFb           = self.LFb       ;
LP            = self.LP        ;
anc           = self.anc       ;
g             = self.g         ;
m1            = self.m1        ;
m3            = self.m3        ;
psi           = self.psi       ;
x1            = self.x1        ;
x4            = self.x4        ;
y1            = self.y1        ;
y4            = self.y4        ;
s__closed     = self.s__closed ;
    

      % evaluate function
      res__1_1 = s__dot;
      t1 = cos(theta3);
      t2 = anc * t1;
      t5 = cos(theta1);
      res__2_1 = 0.1e1 / t5 / LP * theta3__dot * t2;
      res__3_1 = theta3__dot;
      t8 = 0.4188790205e2 * t;
      t9 = sin(t8);
      t10 = 0.91666666e-1 * t9;
      t11 = 0.3839724285e1 * t;
      t12 = -0.3796091123e1 - t10 + t11;
      t13 = cos(t12);
      t15 = sin(t12);
      t16 = t15 * lambda1;
      t19 = cos(-0.4057890511e1 - t10 + t11);
      t21 = cos(t8);
      t22 = t21 ^ 2;
      t23 = t22 ^ 2;
      t29 = t ^ 2;
      t35 = t29 * t;
      t42 = t29 ^ 2;
      t44 = -0.1327293e0 * t13 - 0.1e1 * t16 - 0.327277296e2 * t19 + 0.1687127173e1 * t23 + t22 * (t9 * (0.2826808679e3 * t - 0.216070271e2) + 0.271521908e4 * t - 0.1776136257e5 * t29 - 0.7999797435e2) + t9 * (-0.6701894868e4 * t + 0.11373483e6 * t29 - 0.495990805e6 * t35 + 0.1448315271e3) + 0.6076308472e3 - 0.787682908e4 * t - 0.158803778e7 * t35 + 0.1522050926e6 * t29 + 0.5194003507e7 * t42;
      t45 = t13 ^ 2;
      t49 = sqrt(0.888775927785968922e0 + t45 * 0.111111111111111133e0 + t15 * 0.708554406034431639e-2);
      res__4_1 = 0.1e1 / (-0.1e1 * t49 * t15 * m1 + 0.3333333333e0 * t13 * (t15 - 0.3188494827e-1) * m1) * (t49 * t44 + t13 * (0.3333333333e0 * t16 - 0.1062831609e-1 * lambda1));
      t65 = 0.2479954025e5 * t35;
      t66 = t29 * 0.568674148999999943e4;
      t74 = cos(0.837758041e2 * t);
      t79 = sin(0.1256637062e3 * t);
      t84 = 0.2597001753e6 * t42;
      t86 = cos(0.1675516082e3 * t);
      t90 = sin(theta3);
      t94 = cos(theta3 + psi);
      t96 = g * m3;
      t99 = t9 * (-t65 + t66 + t * (-0.331561222600000008e3) + 0.697150351199999996e1) + t74 * (-0.1957771229e1 + 0.678804765e2 * t - 0.4440340642e3 * t29) + t79 * (0.353351085e1 * t - 0.2700878375e0) - 0.3259606765e3 * t + 0.2841322669e2 + 0.7166220064e4 * t29 - 0.794018892e5 * t35 + t84 + 0.1054454483e-1 * t86 - 0.1e1 * lambda2 * t2 + lambda1 * anc * t90 - 0.1e1 * t96 * t94 * LFb;
      t100 = LFb ^ 2;
      t101 = m3 * t100;
      res__5_1 = 0.1e1 / (t101 + Iz3) * t99;
      t104 = sin(theta1);
      t105 = LP ^ 2;
      t106 = t105 * t104;
      t107 = t5 ^ 2;
      t108 = t107 ^ 2;
      t109 = t108 * t5;
      t113 = t1 ^ 2;
      t114 = t113 * anc;
      t115 = t104 * t107;
      t116 = LP * t115;
      t120 = 3 * theta1;
      t121 = cos(t120);
      t123 = sin(t120);
      t124 = t123 * t109;
      t125 = t90 * t124;
      t128 = t108 ^ 2;
      t129 = t128 * t5;
      t133 = t105 * t1;
      t137 = t107 * t5;
      t138 = t108 * t137;
      t139 = t138 * t105;
      t142 = t108 * t107;
      t146 = LP * t104;
      t153 = t104 * t137;
      t154 = LP * t153;
      t160 = -0.1350439188e0 + 0.1766755425e1 * t;
      t161 = t105 * t160;
      t162 = t104 * t1;
      t163 = t109 * t162;
      t167 = -LP * anc * t160;
      t168 = t104 * t113;
      t169 = t107 * t168;
      t173 = t90 * t161;
      t175 = t123 * t109 * t104;
      t178 = -0.1413404340e2 * t + 0.1080351350e1;
      t179 = t105 * t178;
      t180 = t129 * t90;
      t183 = -t105 * t178;
      t184 = t128 * t162;
      t188 = t105 * (0.1236728798e2 * t - 0.9453074310e0);
      t189 = t138 * t90;
      t192 = -0.4051317562e0 + 0.5300266275e1 * t;
      t193 = t105 * t192;
      t194 = t142 * t162;
      t196 = anc * t178;
      t197 = t113 * LP;
      t198 = t104 * t197;
      t204 = -LP * anc * t192;
      t205 = t137 * t168;
      t211 = -0.4999873522e0 - 0.1110085160e3 * t29 + 0.1697011912e2 * t;
      t212 = t105 * t211;
      t216 = -LP * anc * t211;
      t220 = t90 * t212;
      t224 = -0.1357609530e3 * t + 0.8880681285e3 * t29 + 0.3999898818e1;
      t225 = t105 * t224;
      t228 = -t105 * t224;
      t233 = t105 * (0.1187908339e3 * t - 0.7770596125e3 * t29 - 0.3499911466e1);
      t237 = 0.5091035740e2 * t - 0.3330255482e3 * t29 - 0.1499962057e1;
      t238 = t105 * t237;
      t240 = anc * t224;
      t246 = -LP * anc * t237;
      t253 = -0.3099942531e4 * t35 + t29 * 0.710842685999999958e3 + t * (-0.418868416799999963e2) + 0.905198918999999713e0;
      t254 = t105 * t253;
      t258 = -LP * anc * t253;
      t262 = t90 * t254;
      t265 = t * 0.335094733399999996e3 + t65 - t66 - 0.724159134999999932e1;
      t266 = t105 * t265;
      t269 = -t105 * t265;
      t275 = t105 * (t * (-0.293207891799999970e3) - 0.2169959772e5 * t35 + t29 * 0.497589880400000038e4 + 0.633639243000000096e1);
      t280 = t * (-0.125660525100000015e3) - 0.9299827595e4 * t35 + t29 * 0.213252805900000021e4 + 0.271559675600000006e1;
      t281 = t105 * t280;
      t283 = anc * t265;
      t289 = -LP * anc * t280;
      t293 = t105 * LFb;
      t294 = sin(psi);
      t296 = m3 * g * t294;
      t297 = t296 * t293;
      t299 = anc * t105;
      t300 = lambda1 * t299;
      t302 = 0.1250000000e0 * t297 + 0.1250000000e0 * t300;
      t304 = 2 * theta3;
      t305 = sin(t304);
      t306 = t305 * t109;
      t308 = cos(psi);
      t310 = m3 * g * t308;
      t311 = t310 * t293;
      t312 = 0.1250000000e0 * t311;
      t313 = lambda2 * t299;
      t314 = 0.1250000000e0 * t313;
      t315 = -t312 - t314;
      t316 = t104 * t315;
      t317 = cos(t304);
      t318 = t317 * t109;
      t324 = 0.3246252191e5 * t42 + t35 * (-0.992523614999999882e4) + t29 * 0.951281765999999948e3 + t * (-0.492301441199999914e2) + 0.379769280799999898e1;
      t325 = t105 * t324;
      t327 = theta3__dot ^ 2;
      t328 = t327 * t101;
      t330 = t327 * Iz3;
      t332 = -0.1250000000e0 * t328 - 0.1250000000e0 * t330;
      t333 = t105 * t332;
      t339 = anc * LFb * LP;
      t340 = t310 * t339;
      t342 = anc ^ 2;
      t343 = LP * t342;
      t344 = lambda2 * t343;
      t347 = t113 * t1;
      t349 = t296 * t339;
      t351 = lambda1 * t343;
      t356 = -anc * t324;
      t360 = -t332;
      t361 = anc * t360;
      t362 = t90 * LP;
      t363 = t1 * t362;
      t369 = 0.3750000000e0 * t330 + 0.3750000000e0 * t328;
      t370 = t342 * t369;
      t374 = -t369;
      t375 = t342 * t374;
      t380 = -t302;
      t383 = t105 * t360;
      t384 = t1 * t383;
      t385 = t90 * t325;
      t401 = anc * (0.5000000000e0 * t330 + 0.5000000000e0 * t328);
      t416 = 0.1000000000e1 * t297;
      t417 = 0.1000000000e1 * t300;
      t418 = t416 + t417;
      t422 = 0.1000000000e1 * t311 + 0.1000000000e1 * t313;
      t428 = -t84 + t35 * 0.794018891999999905e5 + t29 * (-0.761025413000000026e4) + t * 0.393841152999999792e3 - 0.303815424599999879e2;
      t429 = t105 * t428;
      t433 = -t422;
      t437 = -t105 * t428;
      t443 = t342 * t90 * lambda2;
      t445 = 0.5000000000e0 * t443 * t197;
      t446 = t347 * LP;
      t447 = t342 * lambda1;
      t449 = 0.5000000000e0 * t447 * t446;
      t453 = LP * lambda2;
      t456 = t113 * t342;
      t457 = lambda1 * t362;
      t472 = t105 * (0.2272376534e6 * t42 + t35 * (-0.694766530499999935e5) + t29 * 0.665897236000000066e4 + t * (-0.344611008900000002e3) + 0.265838496500000048e2);
      t480 = 0.9738756575e5 * t42 + t35 * (-0.297757084500000019e5) + t29 * 0.285384529799999973e4 + t * (-0.147690432399999992e3) + 0.113930784200000002e2;
      t481 = t105 * t480;
      t483 = t105 * t374;
      t497 = anc * t428;
      t514 = -anc * t480;
      t518 = anc * t369;
      t524 = 0.1125000000e1 * t330 + 0.1125000000e1 * t328;
      t525 = t342 * t524;
      t530 = -t342 * t524;
      t533 = t23 * (t121 * (0.1054454483e-1 * t1 * t109 * t106 - 0.1054454483e-1 * t116 * t114) + 0.1054454483e-1 * t125 * t106 - 0.8435635865e-1 * t90 * t129 * t105 + 0.8435635865e-1 * t104 * t128 * t133 + 0.7381181380e-1 * t90 * t139 + 0.3163363449e-1 * t1 * t142 * t106 + t109 * (-0.8435635865e-1 * t146 * t114 + 0.1054454483e-1 * t90 * t105) - 0.3163363449e-1 * t154 * t114) + t22 * (t9 * (t121 * (t163 * t161 + t169 * t167) + t175 * t173 + t180 * t179 + t184 * t183 + t189 * t188 + t194 * t193 + t109 * (t198 * t196 + t173) + t205 * t204) + t121 * (t163 * t212 + t169 * t216) + t175 * t220 + t180 * t225 + t184 * t228 + t189 * t233 + t194 * t238 + t109 * (t198 * t240 + t220) + t205 * t246) + t9 * (t121 * (t163 * t254 + t169 * t258) + t175 * t262 + t180 * t266 + t184 * t269 + t189 * t275 + t194 * t281 + t109 * (t198 * t283 + t262) + t205 * t289) + t121 * (t306 * t104 * t302 + t318 * t316 + t109 * t104 * (t1 * t325 + t90 * t333) + t107 * (t104 * (t347 * (0.1250000000e0 * t340 + 0.1250000000e0 * t344) + t113 * (t90 * (-0.1250000000e0 * t349 - 0.1250000000e0 * t351) + LP * t356) + t363 * t361) + t347 * t370) + t347 * t375) + t123 * (t306 * t316 + t318 * t104 * t380 + t109 * t104 * (t384 + t385)) + t305 * (-t138 * t315 + t142 * t104 * (0.3750000000e0 * t300 + 0.3750000000e0 * t297) + t109 * (t146 * t401 - t312 - t314)) + t317 * (t138 * t302 + t142 * t104 * (-0.3750000000e0 * t313 - 0.3750000000e0 * t311) + t109 * t380) + t129 * (t1 * t90 * t422 + t113 * t418 + t90 * t429 - t416 - t417) + t128 * (t104 * (t113 * t433 + t1 * (t90 * t418 + t437)) + t445 - t449) + t138 * (t104 * (-0.5000000000e0 * t453 * t347 * t342 - 0.5000000000e0 * t457 * t456) - t113 * t418 + t1 * (t90 * t433 + t333) + t90 * t472 + t416 + t417) + t142 * (t104 * (t1 * t481 + t90 * t483) + t449 - t445) + t109 * (t104 * (t347 * (0.1000000000e1 * t340 + 0.1500000000e1 * t344) + t113 * (t90 * (-0.1000000000e1 * t351 - 0.1000000000e1 * t349) + LP * t497)) + t384 + t385) + t137 * (t104 * (t347 * (0.3750000000e0 * t340 + 0.3750000000e0 * t344) + t113 * (t90 * (-0.3750000000e0 * t351 - 0.3750000000e0 * t349) + LP * t514) + t363 * t518) + t347 * t525) + t5 * t347 * t530;
      t535 = anc * m1;
      t536 = m1 * t456;
      t539 = m1 * t342;
      t542 = 0.2e1 * t536 - 0.1e1 * t101 - 0.1e1 * t539 - 0.1e1 * Iz3;
      t545 = t104 ^ 2;
      t548 = m1 * t1;
      t553 = m1 * t113;
      res__6_1 = 0.2000000000e1 / (t128 * t542 * t106 + 0.2e1 * t189 * t548 * t342 * t105 * t545 - 0.1e1 * t142 * t553 * t342 * t106) * t535 * t533 * theta3__dot;
      t562 = t113 * t535;
      t565 = t104 * m1;
      t575 = t105 * m1;
      t582 = t90 * m1;
      t597 = m1 * t161;
      t599 = t115 * t553;
      t604 = t124 * t104 * t90;
      t606 = t129 * t582;
      t610 = t138 * t582;
      t615 = t104 * t553;
      t620 = t153 * t553;
      t624 = m1 * t212;
      t644 = m1 * t254;
      t665 = anc * lambda1 * t575;
      t668 = t105 * LFb * m1;
      t669 = t296 * t668;
      t671 = 0.1250000000e0 * t665 + 0.1250000000e0 * t669;
      t675 = anc * lambda2 * t575;
      t676 = 0.1250000000e0 * t675;
      t677 = t310 * t668;
      t678 = 0.1250000000e0 * t677;
      t679 = -t676 - t678;
      t680 = t104 * t679;
      t687 = t453 * t539;
      t692 = t96 * t308 * LP * LFb * t535;
      t697 = LP * lambda1 * t539;
      t702 = t96 * t294 * LFb * LP * t535;
      t706 = m1 * LP;
      t711 = t1 * t582;
      t715 = t347 * m1;
      t723 = -t671;
      t726 = t548 * t383;
      t727 = t582 * t325;
      t755 = 0.1000000000e1 * t665;
      t756 = 0.1000000000e1 * t669;
      t757 = t755 + t756;
      t761 = 0.1000000000e1 * t675 + 0.1000000000e1 * t677;
      t767 = -t761;
      t780 = 0.5000000000e0 * t443 * t113 * t706;
      t860 = t23 * (t121 * (-0.1054454483e-1 * t116 * t562 + 0.1054454483e-1 * t1 * t109 * t105 * t565) + 0.1054454483e-1 * t125 * t105 * t565 - 0.8435635865e-1 * t180 * t575 + 0.8435635865e-1 * t104 * m1 * t128 * t133 + 0.7381181380e-1 * t582 * t139 + 0.3163363449e-1 * t194 * t575 + t109 * (0.1054454483e-1 * t90 * t575 - 0.8435635865e-1 * t198 * t535) - 0.3163363449e-1 * t154 * t562) + t22 * (t9 * (t121 * (t163 * t597 + t599 * t167) + t604 * t597 + t606 * t179 + t184 * m1 * t183 + t610 * t188 + t194 * m1 * t193 + t109 * (t615 * LP * t196 + t582 * t161) + t620 * t204) + t121 * (t163 * t624 + t599 * t216) + t604 * t624 + t606 * t225 + t184 * m1 * t228 + t610 * t233 + t194 * m1 * t238 + t109 * (t615 * LP * t240 + t582 * t212) + t620 * t246) + t9 * (t121 * (t163 * t644 + t599 * t258) + t604 * t644 + t606 * t266 + t184 * m1 * t269 + t610 * t275 + t194 * m1 * t281 + t109 * (t615 * LP * t283 + t582 * t254) + t620 * t289) + t121 * (t306 * t104 * t671 + t318 * t680 + t109 * t104 * (t548 * t325 + t582 * t333) + t107 * (t104 * (t347 * (0.1250000000e0 * t687 + 0.1250000000e0 * t692) + t113 * (t90 * (-0.1250000000e0 * t697 - 0.1250000000e0 * t702) + t706 * t356) + t711 * LP * t361) + t715 * t370) + t715 * t375) + t123 * (t306 * t680 + t318 * t104 * t723 + t109 * t104 * (t726 + t727)) + t305 * (-t138 * t679 + t142 * t104 * (0.3750000000e0 * t669 + 0.3750000000e0 * t665) + t109 * (t104 * t706 * t401 - t676 - t678)) + t317 * (t138 * t671 + t142 * t104 * (-0.3750000000e0 * t677 - 0.3750000000e0 * t675) + t109 * t723) + t129 * (t1 * t90 * t761 + t113 * t757 + t582 * t429 - t755 - t756) + t128 * (t104 * (t113 * t767 + t1 * (m1 * t437 + t90 * t757)) + 0.5000000000e0 * m1 * t447 * t446 - t780 + t1 * (-0.5000000000e0 * t697 + LP * (-0.5000000000e0 * m3 * lambda1 * t100 - 0.5000000000e0 * Iz3 * lambda1))) + t138 * (t104 * (0.5000000000e0 * lambda2 * t446 * t539 + 0.5000000000e0 * t457 * t536 + t1 * (-0.5000000000e0 * t687 + LP * (-0.5000000000e0 * Iz3 * lambda2 - 0.5000000000e0 * m3 * lambda2 * t100))) - t113 * t757 + t1 * (m1 * t333 + t90 * t767) + t582 * t472 + t755 + t756) + t142 * (t104 * (t548 * t481 + t582 * t483) + t780) + t109 * (t104 * (t347 * (0.1000000000e1 * t687 + 0.1000000000e1 * t692) + t113 * (t90 * (-0.1000000000e1 * t697 - 0.1000000000e1 * t702) + t706 * t497)) + t726 + t727) + t137 * (t104 * (t347 * (0.3750000000e0 * t692 + 0.3750000000e0 * t687) + t113 * (t90 * (-0.3750000000e0 * t697 - 0.3750000000e0 * t702) + t706 * t514) + t711 * LP * t518) + t715 * t525) + t5 * t715 * t530;
      t863 = t342 * t105;
      res__7_1 = 0.2000000000e1 / (t129 * t542 * t105 + 0.2e1 * t128 * t90 * t565 * t1 * t863 - 0.1e1 * t138 * t553 * t863) * t860 * theta3__dot * anc;
      
      % store on output
      res__DfDx = zeros(7,1);
      res__DfDx(1,1) = res__1_1;
      res__DfDx(2,1) = res__2_1;
      res__DfDx(3,1) = res__3_1;
      res__DfDx(4,1) = res__4_1;
      res__DfDx(5,1) = res__5_1;
      res__DfDx(6,1) = res__6_1;
      res__DfDx(7,1) = res__7_1;
    end
    function res__h = h( self, t, vars__ )

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta3 = vars__(3);
      s__dot = vars__(4);
      theta3__dot = vars__(5);
      lambda1 = vars__(6);
      lambda2 = vars__(7);

                      
Iz1           = self.Iz1       ;
Iz3           = self.Iz3       ;
L1            = self.L1        ;
LF            = self.LF        ;
LFb           = self.LFb       ;
LP            = self.LP        ;
anc           = self.anc       ;
g             = self.g         ;
m1            = self.m1        ;
m3            = self.m3        ;
psi           = self.psi       ;
x1            = self.x1        ;
x4            = self.x4        ;
y1            = self.y1        ;
y4            = self.y4        ;
s__closed     = self.s__closed ;
    

      % evaluate function
      t1 = sin(theta1);
      t2 = t1 * LP;
      t3 = sin(theta3);
      res__1 = -anc * t3 + t2 + y1 - y4;
      t5 = cos(theta1);
      t7 = cos(theta3);
      res__2 = t5 * LP - anc * t7 + L1 + s + x1 - x4;
      res__3 = -(lambda1 * t1 - lambda2 * t5) * LP;
      res__4 = -s__dot + theta3__dot / t5 * (t7 * t1 - t3 * t5) * anc;
      t20 = LFb ^ 2;
      t21 = m3 * t20;
      t26 = t5 ^ 2;
      t27 = t26 * t5;
      t28 = 0.4188790205e2 * t;
      t29 = sin(t28);
      t30 = 0.91666666e-1 * t29;
      t31 = 0.3839724285e1 * t;
      t32 = -0.3796091123e1 - t30 + t31;
      t33 = cos(t32);
      t36 = m1 * anc;
      t40 = t7 * t26 * LP * t1 * t36;
      t44 = t3 * t36 * t27 * LP;
      t47 = cos(t28);
      t48 = t47 ^ 2;
      t49 = t48 ^ 2;
      t52 = 0.108035135e1 - 0.141340434e2 * t;
      t55 = t3 * LP;
      t56 = t27 * t55;
      t62 = t26 * t7 * t2;
      t66 = t ^ 2;
      t69 = 0.8880681284e3 * t66 - 0.135760953e3 * t + 0.3999898817e1;
      t82 = (t66 + t * (-0.755121962370158134e-1) + 0.189865006382835145e-2) * (t - 0.153796147090034391e0);
      t84 = m1 * LP;
      t86 = t27 * t3 * t84;
      t94 = sin(psi);
      t96 = m3 * LFb;
      t97 = t96 * t94 * g;
      t100 = (anc * lambda1 + t97) * LP;
      t101 = t7 ^ 2;
      t104 = cos(psi);
      t112 = theta3__dot ^ 2;
      t113 = t112 * Iz3;
      t115 = t112 * t21;
      t118 = anc * (-0.1e1 * t113 - 0.1e1 * t115);
      t126 = (t66 + t * (-0.304352287100278840e0) + 0.240073184157330519e-1) * (t66 + t * (-0.139217036216477178e-2) + 0.487297208600626520e-2);
      t128 = t3 * t84;
      t131 = LP * t36;
      t132 = t97 * t131;
      t134 = Iz3 * lambda1;
      t136 = anc ^ 2;
      t137 = t136 * m1;
      t138 = lambda1 * t137;
      t141 = m3 * lambda1 * t20;
      t151 = g * m3 * t104 * LP * LFb * t36;
      t154 = LP * lambda2 * t137;
      t167 = t1 * t55;
      t172 = t21 + Iz3;
      t176 = sin(t32);
      t183 = cos(-0.4057890511e1 - t30 + t31);
      t200 = t29 * t27;
      t220 = t66 * t;
      t238 = t66 ^ 2;
      t258 = t33 ^ 2;
      t262 = sqrt(0.888775927785968922e0 + t258 * 0.111111111111111133e0 + t176 * 0.708554406034431639e-2);
      t269 = -0.3601171167e0 + 0.47113478e1 * t;
      t281 = -0.2960227095e3 * t66 + 0.45253651e2 * t - 0.1333299605e1;
      t294 = (t66 + t * (-0.755121962488953802e-1) + 0.189865006403917066e-2) * (t - 0.153796147109231646e0);
      t304 = LP * lambda1 * t137;
      t306 = 0.3333333333e0 * t132;
      t307 = -0.3333333333e0 * t304 - t306;
      t311 = -0.3333333333e0 * t151 - 0.3333333333e0 * t154;
      t315 = 0.3333333333e0 * t113 + 0.3333333333e0 * t115;
      t316 = anc * t315;
      t324 = (t66 + t * (-0.304352287109427855e0) + 0.240073184192107283e-1) * (t66 + t * (-0.139217035301576341e-2) + 0.487297208530036979e-2);
      t350 = t101 * m1;
      t359 = 0.1148231564e-1 - 0.1502210809e0 * t;
      t371 = 0.9438668779e1 * t66 - 0.1442910321e1 * t + 0.4251218896e-1;
      t384 = (t66 + t * (-0.755121962474338132e-1) + 0.189865006417138673e-2) * (t - 0.153796147056220578e0);
      t394 = 0.1062831609e-1 * t132;
      t395 = 0.1062831609e-1 * t304 + t394;
      t399 = 0.1062831609e-1 * t151 + 0.1062831609e-1 * t154;
      t403 = -0.1062831609e-1 * t113 - 0.1062831609e-1 * t115;
      t404 = anc * t403;
      t412 = (t66 + t * (-0.304352287085035533e0) + 0.240073184183430752e-1) * (t66 + t * (-0.139217036025666204e-2) + 0.487297208548002122e-2);
      res__5 = 0.1e1 / LP / m1 / t172 / t27 / (0.3333333333e0 * t176 * t33 - 0.1062831609e-1 * t33 - t176 * t262) * (t262 * (t33 * t27 * LP * (-0.1327293e0 * t21 - 0.1327293e0 * Iz3) + t176 * (t49 * (0.8435635863e-1 * t40 - 0.8435635863e-1 * t44) + t48 * (t29 * (t56 * m1 * anc * t52 - t62 * m1 * anc * t52) + t56 * m1 * anc * t69 - t62 * m1 * anc * t69) + t29 * (0.2479954025e5 * t86 * anc * t82 - 0.2479954025e5 * t62 * t36 * t82) + t27 * (t101 * t100 * t36 + t7 * (t3 * (t96 * t104 * g + anc * lambda2) * LP * t36 + t84 * t118) - 0.2597001753e6 * t128 * anc * t126 - 0.1e1 * t132 + LP * (-0.1e1 * t134 - 0.1e1 * t138 - 0.1e1 * t141)) + t26 * (t101 * t1 * (-0.1e1 * t151 - 0.1e1 * t154) + t7 * t1 * (t3 * t100 * t36 + 0.2597001753e6 * t131 * t126) + t167 * m1 * t118) + t172 * t137 * t101 * t112) + t183 * t27 * LP * (-0.327277296e2 * t21 - 0.327277296e2 * Iz3) + t49 * t27 * LP * (0.1687127173e1 * t21 + 0.1687127173e1 * Iz3) + t48 * (t200 * LP * (t * (0.2826808679e3 * Iz3 + 0.2826808679e3 * t21) - 0.216070271e2 * t21 - 0.216070271e2 * Iz3) + t27 * LP * (t66 * (-0.1776136257e5 * t21 - 0.1776136257e5 * Iz3) + t * (0.271521908e4 * t21 + 0.271521908e4 * Iz3) - 0.7999797435e2 * t21 - 0.7999797435e2 * Iz3)) + t200 * LP * (t220 * (-0.495990805e6 * t21 - 0.495990805e6 * Iz3) + t66 * (0.11373483e6 * t21 + 0.11373483e6 * Iz3) + t * (-0.6701894868e4 * t21 - 0.6701894868e4 * Iz3) + 0.1448315271e3 * t21 + 0.1448315271e3 * Iz3) + t27 * LP * (t238 * (0.5194003507e7 * Iz3 + 0.5194003507e7 * t21) + t220 * (-0.158803778e7 * t21 - 0.158803778e7 * Iz3) + t66 * (0.1522050926e6 * t21 + 0.1522050926e6 * Iz3) + t * (-0.787682908e4 * t21 - 0.787682908e4 * Iz3) + 0.6076308472e3 * t21 + 0.6076308472e3 * Iz3)) + t33 * (t176 * (t49 * (-0.2811878621e-1 * t40 + 0.2811878621e-1 * t44) + t48 * (t29 * (t56 * m1 * anc * t269 - t62 * m1 * anc * t269) + t56 * m1 * anc * t281 - t62 * m1 * anc * t281) + t29 * (-0.8266513417e4 * t86 * anc * t294 + 0.8266513417e4 * t62 * t36 * t294) + t27 * (t101 * t307 + t7 * (t3 * t311 + t84 * t316) + 0.865667251e5 * t128 * anc * t324 + t306 + LP * (0.3333333333e0 * t134 + 0.3333333333e0 * t138 + 0.3333333333e0 * t141)) + t26 * (-t101 * t1 * t311 + t7 * t1 * (t3 * t307 - 0.865667251e5 * t131 * t324) + t167 * m1 * t316) - t350 * t136 * t315) + t49 * (0.8965660438e-3 * t40 - 0.8965660438e-3 * t44) + t48 * (t29 * (t56 * m1 * anc * t359 - t62 * m1 * anc * t359) + t56 * m1 * anc * t371 - t62 * m1 * anc * t371) + t29 * (0.2635773527e3 * t86 * anc * t384 - 0.2635773527e3 * t62 * t36 * t384) + t27 * (t101 * t395 + t7 * (t3 * t399 + t84 * t404) - 0.2760175552e4 * t128 * anc * t412 - t394 + LP * (-0.1062831609e-1 * t134 - 0.1062831609e-1 * t138 - 0.1062831609e-1 * t141)) + t26 * (-t101 * t1 * t399 + t7 * t1 * (t3 * t395 + 0.2760175552e4 * t131 * t412) + t167 * m1 * t404) - t350 * t136 * t403));
      

      % store on output
      res__h = zeros(5,1);
      res__h(1) = res__1;
      res__h(2) = res__2;
      res__h(3) = res__3;
      res__h(4) = res__4;
      res__h(5) = res__5;

    end
    function res__DhDx = DhDx( self, t, vars__ )

      % extract states
      s = vars__(1);
      theta1 = vars__(2);
      theta3 = vars__(3);
      s__dot = vars__(4);
      theta3__dot = vars__(5);
      lambda1 = vars__(6);
      lambda2 = vars__(7);

Iz1           = self.Iz1       ;
Iz3           = self.Iz3       ;
L1            = self.L1        ;
LF            = self.LF        ;
LFb           = self.LFb       ;
LP            = self.LP        ;
anc           = self.anc       ;
g             = self.g         ;
m1            = self.m1        ;
m3            = self.m3        ;
psi           = self.psi       ;
x1            = self.x1        ;
x4            = self.x4        ;
y1            = self.y1        ;
y4            = self.y4        ;
s__closed     = self.s__closed ;
    

      % evaluate function
      t1 = cos(theta1);
      res__1_2 = t1 * LP;
      t2 = cos(theta3);
      res__1_3 = -anc * t2;
      res__2_1 = 1;
      t4 = sin(theta1);
      t5 = t4 * LP;
      res__2_2 = -t5;
      t6 = sin(theta3);
      res__2_3 = anc * t6;
      res__3_2 = -(lambda1 * t1 + lambda2 * t4) * LP;
      res__3_6 = res__2_2;
      res__3_7 = res__1_2;
      t12 = t1 ^ 2;
      res__4_2 = 0.1e1 / t12 * t2 * anc * theta3__dot;
      t16 = t6 * t4;
      t19 = 0.1e1 / t1;
      res__4_3 = theta3__dot * t19 * (-t2 * t1 - t16) * anc;
      res__4_4 = -1;
      t23 = -t6 * t1 + t2 * t4;
      res__4_5 = t19 * t23 * anc;
      t28 = t2 * LP;
      t29 = t12 ^ 2;
      t30 = t29 * t28;
      t33 = 0.4188790205e2 * t;
      t34 = cos(t33);
      t35 = t34 ^ 2;
      t36 = t35 ^ 2;
      t41 = t12 * t2;
      t42 = sin(t33);
      t43 = t42 * t41;
      t45 = t ^ 2;
      t49 = t29 * t2;
      t66 = LP * lambda2 * anc;
      t68 = LP * LFb;
      t69 = cos(psi);
      t72 = m3 * g * t69 * t68;
      t75 = t2 ^ 2;
      t77 = sin(psi);
      t80 = m3 * g * t77 * t68;
      t83 = LP * lambda1 * anc;
      t96 = theta3__dot ^ 2;
      t97 = t96 * Iz3;
      t99 = LFb ^ 2;
      t100 = m3 * t99;
      t101 = t96 * t100;
      t108 = anc * t97;
      t112 = anc * m3 * t99 * t96;
      t120 = -0.3796091123e1 - 0.91666666e-1 * t42 + 0.3839724285e1 * t;
      t121 = sin(t120);
      t123 = cos(t120);
      t124 = t123 ^ 2;
      t128 = sqrt(0.888775927785968922e0 + t124 * 0.111111111111111133e0 + t121 * 0.708554406034431639e-2);
      t131 = t36 * t12 * t28;
      t244 = 0.1e1 / LP;
      t247 = 0.1e1 / (t100 + Iz3);
      res__5_2 = 0.3333333333e0 / (0.3333333333e0 * t121 * t123 - 0.1062831609e-1 * t123 - t121 * t128) / t29 * t247 * t244 * (t128 * t121 * (t36 * (0.2530690758e0 * t2 * t12 * LP + 0.9000000000e-10 * t30) + t35 * (t43 * (-0.3241054050e1 + 0.4240213020e2 * t) * LP + t49 * LP * (-0.9000000000e-9 - 0.1200000000e-5 * t45) + t41 * LP * (-0.1199969645e2 - 0.2664204384e4 * t45 + 0.4072828590e3 * t)) - 0.7439862075e5 * t43 * LP * (t45 + t * (-0.755121962073540542e-1) + 0.189865006346216997e-2) * (t - 0.153796147119696108e0) + t12 * (t75 * (-0.3000000000e1 * t66 - 0.3000000000e1 * t72) + t2 * (t6 * (0.3000000000e1 * t80 + 0.3000000000e1 * t83) + 0.7791005259e6 * LP * (t45 + t * (-0.304352287109520947e0) + 0.240073184128044778e-1) * (t45 + t * (-0.139217035292266665e-2) + 0.487297208660070289e-2)) + t6 * LP * (-0.3000000000e1 * t97 - 0.3000000000e1 * t101)) + t75 * t4 * (0.9000000000e1 * t108 + 0.9000000000e1 * t112)) + t123 * (t121 * (-0.8435635863e-1 * t131 + t35 * (t43 * (-0.1413404340e2 * t + 0.1080351350e1) * LP - 0.1260000000e-8 * t30 + t41 * LP * (0.3999898815e1 + 0.8880681285e3 * t45 - 0.1357609530e3 * t)) + 0.2479954025e5 * t43 * LP * (t45 + t * (-0.755121962476179159e-1) + 0.189865006398580970e-2) * (t - 0.153796147119755616e0) + t49 * LP * (-0.3000000000e-5 * t45 + 0.6300000000e-9) + t12 * (t75 * (0.9999999999e0 * t66 + 0.9999999999e0 * t72) + t2 * (t6 * (-0.9999999999e0 * t80 - 0.9999999999e0 * t83) - 0.2597001753e6 * LP * (t45 + t * (-0.304352287109427855e0) + 0.240073184192107283e-1) * (t45 + t * (-0.139217035301576341e-2) + 0.487297208530036979e-2)) + t6 * LP * (0.9999999999e0 * t97 + 0.9999999999e0 * t101)) + t75 * t4 * (-0.3000000000e1 * t108 - 0.3000000000e1 * t112)) + 0.2689698131e-2 * t131 + t35 * (t43 * (-0.3444694692e-1 + 0.4506632427e0 * t) * LP - 0.6000000000e-11 * t30 + t41 * LP * (-0.1275365669e0 - 0.2831600634e2 * t45 + 0.4328730963e1 * t)) - 0.7907320581e3 * t43 * LP * (t45 + t * (-0.755121962696446020e-1) + 0.189865006498785190e-2) * (t - 0.153796146983423782e0) + t49 * LP * (0.3000000000e-8 * t45 - 0.4140000000e-10) + t12 * (t75 * (-0.3188494827e-1 * t66 - 0.3188494827e-1 * t72) + t2 * (t6 * (0.3188494827e-1 * t80 + 0.3188494827e-1 * t83) + 0.8280526656e4 * LP * (t45 + t * (-0.304352287115698061e0) + 0.240073184162296061e-1) * (t45 + t * (-0.139217035374722864e-2) + 0.487297208590901053e-2)) + t6 * LP * (-0.3188494827e-1 * t97 - 0.3188494827e-1 * t101)) + t75 * t4 * (0.9565484481e-1 * t108 + 0.9565484481e-1 * t112))) * anc;
      t258 = t12 * t1;
      t260 = t2 * t258 * LP;
      t263 = t6 * t12 * t5;
      t269 = (-0.70670217e1 * t + 0.540175675e0) * LP;
      t270 = t258 * t2;
      t272 = t12 * t16;
      t279 = LP * (0.1999949408e1 - 0.678804765e2 * t + 0.4440340642e3 * t45);
      t285 = t45 * t;
      t289 = LP * (-0.362079567499999877e1 + t * 0.167547366699999941e3 + 0.1239977012e5 * t285 + t45 * (-0.284337074499999972e4));
      t296 = 0.1e1 * t72 + 0.1e1 * t66;
      t300 = -0.1e1 * t80 - 0.1e1 * t83;
      t303 = t45 ^ 2;
      t308 = LP * (t285 * 0.397009445999999953e5 - 0.1298500876e6 * t303 + 0.1969205765e3 * t - 0.3805127064e4 * t45 - 0.151907712299999975e2);
      t313 = 0.5e0 * t101 + 0.5e0 * t97;
      t344 = 0.1e1 / t258;
      res__5_3 = -0.2000000000e1 * t344 * t247 * t244 * (t36 * (-0.4217817932e-1 * t260 - 0.4217817932e-1 * t263) + t35 * (t42 * (t270 * t269 + t272 * t269) + t270 * t279 + t272 * t279) + t42 * (t270 * t289 + t272 * t289) + t258 * (t75 * t296 + t2 * (t6 * t300 + t308) + t6 * LP * t313 - 0.5e0 * t66 - 0.5e0 * t72) + t12 * (-t75 * t4 * t300 + t2 * t4 * (-LP * t313 + t6 * t296) + t4 * (t6 * t308 - 0.5e0 * t80 - 0.5e0 * t83)) + t2 * t6 * (-0.1e1 * t112 - 0.1e1 * t108)) * anc;
      res__5_5 = 2 * t344 * (-t75 * anc + t260 + t263) * theta3__dot * anc * t244;
      t354 = anc ^ 2;
      t367 = t247 * t19;
      res__5_6 = t367 / m1 * (t1 * (-m1 * t75 * t354 + m1 * t354 + Iz3 + t100) - t2 * t4 * m1 * t6 * t354);
      res__5_7 = t2 * t367 * t23 * t354;
      
      % store on output
      res__DhDx = zeros(5,7);
      res__DhDx(1,2) = res__1_2;
      res__DhDx(1,3) = res__1_3;
      res__DhDx(2,1) = res__2_1;
      res__DhDx(2,2) = res__2_2;
      res__DhDx(2,3) = res__2_3;
      res__DhDx(3,2) = res__3_2;
      res__DhDx(3,6) = res__3_6;
      res__DhDx(3,7) = res__3_7;
      res__DhDx(4,2) = res__4_2;
      res__DhDx(4,3) = res__4_3;
      res__DhDx(4,4) = res__4_4;
      res__DhDx(4,5) = res__4_5;
      res__DhDx(5,2) = res__5_2;
      res__DhDx(5,3) = res__5_3;
      res__DhDx(5,5) = res__5_5;
      res__DhDx(5,6) = res__5_6;
      res__DhDx(5,7) = res__5_7;
    end





    function plot(self, T, vars__)
      s = vars__(1,:);
      theta1 = vars__(2,:);
      theta3 = vars__(3,:);
      s__dot = vars__(4,:);
      theta3__dot = vars__(5,:);
      lambda1 = vars__(6,:);
      lambda2 = vars__(7,:);

      figure(1)
      plot(T,s);
      title("s(t)");

      figure(2)
      plot(T,theta3);
      title("theta3(t)");
 
      figure(3)
      plot(T,theta3__dot);
        title("theta3__dot(t)");

    end
    
    end


end
